AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      MasterUsername: dbadmin
      MasterUserPassword: Password123
      DBClusterIdentifier: documentdb-cluster
      BackupRetentionPeriod: 1
      PreferredBackupWindow: '07:34-08:04'
      PreferredMaintenanceWindow: sun:23:45-mon:00:15
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - DocumentDBSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DocumentDBSubnetGroup
    Metadata:
      SamResourceId: DocumentDBCluster
  DocumentDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier:
        Ref: DocumentDBCluster
      DBInstanceClass: db.r5.large
      DBInstanceIdentifier: documentdb-instance
    Metadata:
      SamResourceId: DocumentDBInstance
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DocumentDB
      SubnetIds:
      - subnet-0aa604b4006874e52
      - subnet-07b8d02c723885c69
    Metadata:
      SamResourceId: DocumentDBSubnetGroup
  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DocumentDB
      VpcId: vpc-091176581f47b6edb
    Metadata:
      SamResourceId: DocumentDBSecurityGroup
  NestjsDocumentDBFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaBasicExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: DocumentDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - docdb:DescribeDBClusters
            - docdb:DescribeDBInstances
            - docdb:ListTagsForResource
            Resource: '*'
      - PolicyName: LambdaEC2Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DetachNetworkInterface
            - ec2:DeleteNetworkInterface
            Resource: '*'
    Metadata:
      SamResourceId: NestjsDocumentDBFunctionRole
  NestjsDocumentDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/main.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 60
      Role:
        Fn::GetAtt:
        - NestjsDocumentDBFunctionRole
        - Arn
      Environment:
        Variables:
          MONGODB_URI:
            Fn::Sub: mongodb://dbadmin:Password123@${DocumentDBCluster.Endpoint}:27017/mydatabase?tls=true&tlsCAFile=global-bundle.pem&retryWrites=false
      VpcConfig:
        SubnetIds:
        - subnet-0aa604b4006874e52
        - subnet-07b8d02c723885c69
        SecurityGroupIds:
        - Fn::GetAtt:
          - DocumentDBSecurityGroup
          - GroupId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      CodeUri: s3://mynestjssam-bucket/ce363575942ee93054cd52d327721def
    Metadata:
      SamResourceId: NestjsDocumentDBFunction
Outputs:
  NestjsDocumentDBApi:
    Description: API Gateway endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  DocumentDBClusterEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value:
      Fn::GetAtt:
      - DocumentDBCluster
      - Endpoint
